C51 COMPILER V9.51   CYFITTER_CFG                                                          04/06/2015 16:45:21 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_951\Debug\cyfitter_cfg.lst) CD DB 
                    -NOIP OT(2,SIZE) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051_Keil_951\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator 3.0 SP2
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.  Except for the user defined sections in
   8          * CyClockStartupError(), this file should not be modified.
   9          *
  10          ********************************************************************************
  11          * Copyright 2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <string.h>
  18          #include <cytypes.h>
  19          #include <cydevice_trm.h>
  20          #include <cyfitter.h>
  21          #include <CyLib.h>
  22          #include <cyfitter_cfg.h>
  23          
  24          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  25          
  26          
  27          #if defined(__C51__) || defined(__CX51__)
  28                  #define CYPACKED
  29                  #define CYPACKED_ATTR
  30                  #define CYALIGNED
  31                  #define DMAINITSEC
  32              #define CY_CFG_UNUSED
  33                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  34          
  35          
  36          
  37                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  38                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  39                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  40          #else
                      #error Unsupported toolchain
              #endif
  43          
  44          
  45          
  46          /* Clock startup error codes                                                   */
  47          #define CYCLOCKSTART_NO_ERROR    0u
  48          #define CYCLOCKSTART_XTAL_ERROR  1u
  49          #define CYCLOCKSTART_32KHZ_ERROR 2u
  50          #define CYCLOCKSTART_PLL_ERROR   3u
  51          
  52          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  53          /*******************************************************************************
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/06/2015 16:45:21 PAGE 2   

  54          * Function Name: CyClockStartupError
  55          ********************************************************************************
  56          * Summary:
  57          *  If an error is encountered during clock configuration (crystal startup error,
  58          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  59          *  the customer, this function will stop in an infinite loop.
  60          *
  61          * Parameters:
  62          *   void
  63          *
  64          * Return:
  65          *   void
  66          *
  67          *******************************************************************************/
  68          CY_CFG_UNUSED
  69          static void CyClockStartupError(uint8 errorCode);
  70          CY_CFG_UNUSED
  71          static void CyClockStartupError(uint8 errorCode)
  72          {
  73   1          /* To remove the compiler warning if errorCode not used.                */
  74   1          errorCode = errorCode;
  75   1      
  76   1          /* `#START CyClockStartupError` */
  77   1      
  78   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  79   1          /* we will end up here to allow the customer to implement something to  */
  80   1          /* deal with the clock condition.                                       */
  81   1      
  82   1          /* `#END` */
  83   1      
  84   1          /* If nothing else, stop here since the clocks have not started         */
  85   1          /* correctly.                                                           */
  86   1          while(1) {}
  87   1      }
  88          #endif
  89          
  90          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
  91          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x00080000u)
  92          
  93          
  94          /*******************************************************************************
  95          * Function Name: cfg_dma_init
  96          ********************************************************************************
  97          * Summary:
  98          *  This function is used to copy device configuration data from constant values
  99          *  stored in memory into the proper chip configuration registers using DMA.  It
 100          *  pulls data out of the CFG_TD_LISTs to know exactly how/what to configure.
 101          *
 102          * Parameters:  
 103          *   void
 104          *
 105          * Return:
 106          *   void
 107          *
 108          *******************************************************************************/
 109          static void cfg_dma_init(void);
 110          static void cfg_dma_init(void)
 111          {
 112   1              /* TD structure for big-endian systems. Requires 2-byte endian swap */
 113   1              CYPACKED struct td_t {
 114   1                      uint16 size;
 115   1                      uint8 flags;
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/06/2015 16:45:21 PAGE 3   

 116   1                      uint8 next_td_ptr;
 117   1                      uint16 src;
 118   1                      uint16 dest;
 119   1              } CYPACKED_ATTR;
 120   1      
 121   1              /* PHUB_CH1_CFGMEM_CFG0/1 initialization data */
 122   1              DMAINITSEC static const uint8 CYCODE CH1_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u
             -, 0x00u };
 123   1      
 124   1              /* PHUB_CH2_CFGMEM_CFG0/1 initialization data */
 125   1              DMAINITSEC static const uint8 CYCODE CH2_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x01u
             -, 0x00u };
 126   1      
 127   1              /* Initialization data for each DMA channel's TD registers */
 128   1              DMAINITSEC static const uint8 CYCODE DMA_TD_START_CMD[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x01u };
 129   1      
 130   1              CYALIGNED static uint32 CYXDATA DMA_ZERO_VAL;
 131   1      
 132   1              /* This table holds all of the initialization data necessary for the DMA
 133   1                 process to transfer data from the source location to the destination. */
 134   1              DMAINITSEC static const struct td_t CYCODE CFG_TD_LIST0[] = {
 135   1                      /* Size, Flags, Next, Source, Destination */
 136   1                      { 8u, 0x23u, 0x02u, (uint16)(uint32)(CH1_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM1_CFG0) },      /* TD 1 */
 137   1                      { 8u, 0x23u, 0x03u, (uint16)(uint32)(CH2_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM2_CFG0) },      /* TD 2 */
 138   1                      { 5u, 0x23u, 0x04u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH1_BASIC_CFG) },   /* TD 3 */
 139   1                      { 5u, 0x23u, 0xFEu, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH2_BASIC_CFG) },   /* TD 4 */
 140   1                      { 32u, 0x22u, 0x06u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT0_DR) },        /* TD 5 */
 141   1                      { 64u, 0x22u, 0x07u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT3_DR) },        /* TD 6 */
 142   1                      { 16u, 0x22u, 0x08u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT12_DR) },       /* TD 7 */
 143   1                      { 16u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT15_DR) },       /* TD 8 */
 144   1                      { 4095u, 0x22u, 0x0Au, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P0_U0_BASE) },   /* TD 9 */
 145   1                      { 1u, 0x22u, 0x0Bu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P7_ROUTE_BASE + 0x00000080u)
             - },        /* TD 10 */
 146   1                      { 2048u, 0x22u, 0x0Cu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P2_U0_BASE) },   /* TD 11 *
             -/
 147   1                      { 2560u, 0x22u, 0x0Du, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE) },       /* TD 12 */
 148   1                      { 512u, 0x22u, 0x0Eu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE) },       /* TD 13 */
 149   1                      { 32u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_BCTL0_MDCLK_EN) }, /* TD 14 */
 150   1              };
 151   1      
 152   1              DMA_ZERO_VAL = 0u;
 153   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG0, 0x10u);    /* set burstcnt */
 154   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_CFG, 0x01u);   /* enable ch0 */
 155   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH0_BASIC_STATUS+1u), 0x00u);   /* set first TD to 0 */
 156   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD0, 14u*8u);       /* transfer size */
 157   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+2u), 0x01u);    /* set next TD to 1 */
 158   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+3u), 0xA3u);    /* set TD flags */
 159   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD1, (uint16)((uint32)CFG_TD_LIST0 & 0x0000FFFFu)); /
             -* set td0's src addr */
 160   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD1+2u), CYDEV_PHUB_TDMEM1_BASE);  /* set td0's dst a
             -ddr */
 161   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG1, (uint16)(CYDEV_FLS_BASE >> 16));  /* set ch0's src h
             -igh addr */
 162   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_CFGMEM0_CFG1+2u), (uint16)(CYDEV_PHUB_TDMEM1_BASE >> 16));     /* se
             -t ch0's dst high addr */
 163   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH1_BASIC_STATUS+1u), 0x05u);   /* ch1 first TD: 5 */
 164   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH2_BASIC_STATUS+1u), 0x09u);   /* ch2 first TD: 9 */
 165   1      
 166   1              CY_CFG_MEMORY_BARRIER();
 167   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_ACTION, 0x01u); /* cpu_req */
 168   1              CY_CFG_MEMORY_BARRIER();
 169   1      
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/06/2015 16:45:21 PAGE 4   

 170   1              /* Wait for all DMA transfers to complete */
 171   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_STATUS) & 0x01u)){}
 172   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH1_BASIC_STATUS) & 0x01u)){}
 173   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH2_BASIC_STATUS) & 0x01u)){}
 174   1      
 175   1      
 176   1      }
 177          /*******************************************************************************
 178          * Function Name: ClockSetup
 179          ********************************************************************************
 180          *
 181          * Summary:
 182          *  Performs the initialization of all of the clocks in the device based on the
 183          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 184          *  clocks and setting the necessary dividers to produce the desired frequency. 
 185          *
 186          * Parameters:
 187          *  void
 188          *
 189          * Return:
 190          *  void
 191          *
 192          *******************************************************************************/
 193          static void ClockSetup(void);
 194          static void ClockSetup(void)
 195          {
 196   1              uint32 timeout;
 197   1              uint8 pllLock;
 198   1      
 199   1      
 200   1              /* Configure ILO based on settings from Clock DWR */
 201   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
 202   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 203   1      
 204   1              /* Configure IMO based on settings from Clock DWR */
 205   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03u);
 206   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_3MHZ)));
 207   1      
 208   1              /* Configure PLL based on settings from Clock DWR */
 209   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008u);
 210   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 211   1              /* Wait up to 250us for the PLL to lock */
 212   1              pllLock = 0u;
 213   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 214   1              { 
 215   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 216   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 217   2              }
 218   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 219   1              if (timeout == 0u)
 220   1              {
 221   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 222   2              }
 223   1      
 224   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 225   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 226   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 227   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 228   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 229   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/06/2015 16:45:21 PAGE 5   

 230   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 231   1      }
 232          
 233          
 234          /* Analog API Functions */
 235          
 236          
 237          /*******************************************************************************
 238          * Function Name: AnalogSetDefault
 239          ********************************************************************************
 240          *
 241          * Summary:
 242          *  Sets up the analog portions of the chip to default values based on chip
 243          *  configuration options from the project.
 244          *
 245          * Parameters:
 246          *  void
 247          *
 248          * Return:
 249          *  void
 250          *
 251          *******************************************************************************/
 252          static void AnalogSetDefault(void);
 253          static void AnalogSetDefault(void)
 254          {
 255   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 256   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 257   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 258   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 259   1      }
 260          
 261          
 262          /*******************************************************************************
 263          * Function Name: SetAnalogRoutingPumps
 264          ********************************************************************************
 265          *
 266          * Summary:
 267          * Enables or disables the analog pumps feeding analog routing switches.
 268          * Intended to be called at startup, based on the Vdda system configuration;
 269          * may be called during operation when the user informs us that the Vdda voltage
 270          * crossed the pump threshold.
 271          *
 272          * Parameters:
 273          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 274          *
 275          * Return:
 276          *  void
 277          *
 278          *******************************************************************************/
 279          void SetAnalogRoutingPumps(uint8 enabled)
 280          {
 281   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 282   1              if (enabled != 0u)
 283   1              {
 284   2                      regValue |= 0x00u;
 285   2              }
 286   1              else
 287   1              {
 288   2                      regValue &= (uint8)~0x00u;
 289   2              }
 290   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 291   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/06/2015 16:45:21 PAGE 6   

 292          
 293          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 294          
 295          
 296          /*******************************************************************************
 297          * Function Name: cyfitter_cfg
 298          ********************************************************************************
 299          * Summary:
 300          *  This function is called by the start-up code for the selected device. It
 301          *  performs all of the necessary device configuration based on the design
 302          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 303          *  as Clocks and Pins as well as any component configuration that is necessary.
 304          *
 305          * Parameters:  
 306          *   void
 307          *
 308          * Return:
 309          *   void
 310          *
 311          *******************************************************************************/
 312          
 313          void cyfitter_cfg(void)
 314          {
 315   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 316   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 317   1      
 318   1              {
 319   2                      cfg_dma_init();
 320   2      
 321   2                      /* Enable digital routing */
 322   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 323   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 324   2      
 325   2                      /* Enable UDB array */
 326   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 327   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 328   2              }
 329   1      
 330   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 331   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (const void CYFAR *)(BS_IOPINS0_2_VAL), 8u);
 332   1      
 333   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 334   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 335   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 336   1              {
 337   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 338   2              }
 339   1      
 340   1      
 341   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 342   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 343   1              /* Setup clocks based on selections from Clock DWR */
 344   1              ClockSetup();
 345   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 346   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xB1u : 0x80u));
 347   1      
 348   1              /* Perform basic analog initialization to defaults */
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/06/2015 16:45:21 PAGE 7   

 349   1              AnalogSetDefault();
 350   1      
 351   1              /* Configure alternate active mode */
 352   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 353   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 354   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/06/2015 16:45:21 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 71
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 74
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 86
000F 80FE              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION cfg_dma_init (BEGIN)
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 152
0000 7F00              MOV     R7,#00H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 900000      R     MOV     DPTR,#DMA_ZERO_VAL
000B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 153
000E 907600            MOV     DPTR,#07600H
0011 7410              MOV     A,#010H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
0014 907010            MOV     DPTR,#07010H
0017 7401              MOV     A,#01H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
001A 907019            MOV     DPTR,#07019H
001D E4                CLR     A
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
001F 7B02              MOV     R3,#02H
0021 7A78              MOV     R2,#078H
0023 7900              MOV     R1,#00H
0025 7D70              MOV     R5,#070H
0027 7C00              MOV     R4,#00H
0029 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 157
002C 907802            MOV     DPTR,#07802H
002F 7401              MOV     A,#01H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
0032 907803            MOV     DPTR,#07803H
0035 74A3              MOV     A,#0A3H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
0038 7B02              MOV     R3,#02H
003A 7A78              MOV     R2,#078H
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/06/2015 16:45:21 PAGE 9   

003C 7904              MOV     R1,#04H
003E C003              PUSH    AR3
0040 C002              PUSH    AR2
0042 C001              PUSH    AR1
0044 7BFF              MOV     R3,#0FFH
0046 7A00        R     MOV     R2,#HIGH CFG_TD_LIST0
0048 7900        R     MOV     R1,#LOW CFG_TD_LIST0
004A AF01              MOV     R7,AR1
004C AE02              MOV     R6,AR2
004E AD03              MOV     R5,AR3
0050 7C00              MOV     R4,#00H
0052 EF                MOV     A,R7
0053 54FF              ANL     A,#0FFH
0055 FF                MOV     R7,A
0056 EE                MOV     A,R6
0057 54FF              ANL     A,#0FFH
0059 FE                MOV     R6,A
005A ED                MOV     A,R5
005B 5400              ANL     A,#00H
005D FD                MOV     R5,A
005E EC                MOV     A,R4
005F 5400              ANL     A,#00H
0061 FC                MOV     R4,A
0062 AD07              MOV     R5,AR7
0064 AC06              MOV     R4,AR6
0066 D001              POP     AR1
0068 D002              POP     AR2
006A D003              POP     AR3
006C 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 160
006F 7B02              MOV     R3,#02H
0071 7A78              MOV     R2,#078H
0073 7906              MOV     R1,#06H
0075 7D08              MOV     R5,#08H
0077 7C78              MOV     R4,#078H
0079 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 161
007C 7B02              MOV     R3,#02H
007E 7A76              MOV     R2,#076H
0080 7904              MOV     R1,#04H
0082 7D10              MOV     R5,#010H
0084 7C00              MOV     R4,#00H
0086 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 162
0089 7B02              MOV     R3,#02H
008B 7A76              MOV     R2,#076H
008D 7906              MOV     R1,#06H
008F 7D00              MOV     R5,#00H
0091 7C00              MOV     R4,#00H
0093 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 163
0096 907029            MOV     DPTR,#07029H
0099 7405              MOV     A,#05H
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
009C 907039            MOV     DPTR,#07039H
009F 7409              MOV     A,#09H
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
00A2 907014            MOV     DPTR,#07014H
00A5 7401              MOV     A,#01H
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/06/2015 16:45:21 PAGE 10  

00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 168
00A8         ?C0010:
                                           ; SOURCE LINE # 171
00A8 907018            MOV     DPTR,#07018H
00AB E0                MOVX    A,@DPTR
00AC FF                MOV     R7,A
00AD EF                MOV     A,R7
00AE 5401              ANL     A,#01H
00B0 FF                MOV     R7,A
00B1 7E00              MOV     R6,#00H
00B3 EF                MOV     A,R7
00B4 4E                ORL     A,R6
00B5 70F1              JNZ     ?C0010
00B7         ?C0011:
00B7         ?C0012:
                                           ; SOURCE LINE # 172
00B7 907028            MOV     DPTR,#07028H
00BA E0                MOVX    A,@DPTR
00BB FF                MOV     R7,A
00BC EF                MOV     A,R7
00BD 5401              ANL     A,#01H
00BF FF                MOV     R7,A
00C0 7E00              MOV     R6,#00H
00C2 EF                MOV     A,R7
00C3 4E                ORL     A,R6
00C4 70F1              JNZ     ?C0012
00C6         ?C0013:
00C6         ?C0014:
                                           ; SOURCE LINE # 173
00C6 907038            MOV     DPTR,#07038H
00C9 E0                MOVX    A,@DPTR
00CA FF                MOV     R7,A
00CB EF                MOV     A,R7
00CC 5401              ANL     A,#01H
00CE FF                MOV     R7,A
00CF 7E00              MOV     R6,#00H
00D1 EF                MOV     A,R7
00D2 4E                ORL     A,R6
00D3 70F1              JNZ     ?C0014
00D5         ?C0015:
                                           ; SOURCE LINE # 176
00D5         ?C0016:
00D5 22                RET     
             ; FUNCTION cfg_dma_init (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 201
0000 904300            MOV     DPTR,#04300H
0003 7402              MOV     A,#02H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
0006 904000            MOV     DPTR,#04000H
0009 7408              MOV     A,#08H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
000C 904200            MOV     DPTR,#04200H
000F 7403              MOV     A,#03H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/06/2015 16:45:21 PAGE 11  

0012 7B0C              MOV     R3,#0CH
0014 7A01              MOV     R2,#01H
0016 7908              MOV     R1,#08H
0018 120000      E     LCALL   _cyread8
001B 9046A1            MOV     DPTR,#046A1H
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
0020 7B00              MOV     R3,#00H
0022 7A42              MOV     R2,#042H
0024 7922              MOV     R1,#022H
0026 7D08              MOV     R5,#08H
0028 7C00              MOV     R4,#00H
002A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 210
002D 7B00              MOV     R3,#00H
002F 7A42              MOV     R2,#042H
0031 7920              MOV     R1,#020H
0033 7D51              MOV     R5,#051H
0035 7C12              MOV     R4,#012H
0037 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 212
003A 900000      R     MOV     DPTR,#pllLock
003D E4                CLR     A
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
003F 7F19              MOV     R7,#019H
0041 7E00              MOV     R6,#00H
0043 7D00              MOV     R5,#00H
0045 7C00              MOV     R4,#00H
0047 900000      R     MOV     DPTR,#timeout
004A 120000      E     LCALL   ?C?LSTXDATA
004D         ?C0017:
004D 900000      R     MOV     DPTR,#timeout
0050 120000      E     LCALL   ?C?LLDXDATA
0053 D3                SETB    C
0054 EF                MOV     A,R7
0055 9400              SUBB    A,#00H
0057 EE                MOV     A,R6
0058 9400              SUBB    A,#00H
005A 404E              JC      ?C0018
005C 900000      R     MOV     DPTR,#pllLock
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 EF                MOV     A,R7
0062 6403              XRL     A,#03H
0064 6044              JZ      ?C0018
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
0066 904225            MOV     DPTR,#04225H
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C 5401              ANL     A,#01H
006E FF                MOV     R7,A
006F 7E00              MOV     R6,#00H
0071 900000      R     MOV     DPTR,#pllLock
0074 E0                MOVX    A,@DPTR
0075 FE                MOV     R6,A
0076 EE                MOV     A,R6
0077 25E0              ADD     A,ACC
0079 FE                MOV     R6,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/06/2015 16:45:21 PAGE 12  

007A EE                MOV     A,R6
007B 4F                ORL     A,R7
007C FF                MOV     R7,A
007D EF                MOV     A,R7
007E 5403              ANL     A,#03H
0080 FF                MOV     R7,A
0081 900000      R     MOV     DPTR,#pllLock
0084 EF                MOV     A,R7
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
0086 7FE0              MOV     R7,#0E0H
0088 7E01              MOV     R6,#01H
008A 7D00              MOV     R5,#00H
008C 7C00              MOV     R4,#00H
008E 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 217
0091 900000      R     MOV     DPTR,#timeout
0094 120000      E     LCALL   ?C?LLDXDATA
0097 7BFF              MOV     R3,#0FFH
0099 7AFF              MOV     R2,#0FFH
009B 79FF              MOV     R1,#0FFH
009D 78FF              MOV     R0,#0FFH
009F 120000      E     LCALL   ?C?LADD
00A2 900000      R     MOV     DPTR,#timeout
00A5 120000      E     LCALL   ?C?LSTXDATA
00A8 80A3              SJMP    ?C0017
00AA         ?C0018:
                                           ; SOURCE LINE # 219
00AA 900000      R     MOV     DPTR,#timeout
00AD 120000      E     LCALL   ?C?LLDXDATA
00B0 EF                MOV     A,R7
00B1 4E                ORL     A,R6
00B2 7005              JNZ     ?C0020
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 221
00B4 7F03              MOV     R7,#03H
00B6 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 222
00B9         ?C0020:
                                           ; SOURCE LINE # 225
00B9 7B00              MOV     R3,#00H
00BB 7A40              MOV     R2,#040H
00BD 7904              MOV     R1,#04H
00BF 7D00              MOV     R5,#00H
00C1 7C01              MOV     R4,#01H
00C3 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 226
00C6 904004            MOV     DPTR,#04004H
00C9 7407              MOV     A,#07H
00CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 227
00CC 904006            MOV     DPTR,#04006H
00CF E4                CLR     A
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 228
00D1 904008            MOV     DPTR,#04008H
00D4 7448              MOV     A,#048H
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 229
00D7 904004            MOV     DPTR,#04004H
00DA E4                CLR     A
00DB F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/06/2015 16:45:21 PAGE 13  

                                           ; SOURCE LINE # 230
00DC 904001            MOV     DPTR,#04001H
00DF 7402              MOV     A,#02H
00E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 231
00E2 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 257
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
002F 905876            MOV     DPTR,#05876H
0032 7444              MOV     A,#044H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
0035 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 279
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/06/2015 16:45:21 PAGE 14  

000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 282
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0023
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4400              ORL     A,#00H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 285
0025 800E              SJMP    ?C0024
0027         ?C0023:
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54FF              ANL     A,#0FFH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 289
0035         ?C0024:
                                           ; SOURCE LINE # 290
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 291
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 316
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4405              ORL     A,#05H
000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 318
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/06/2015 16:45:21 PAGE 15  

                                           ; SOURCE LINE # 319
0016 120000      R     LCALL   cfg_dma_init
                                           ; SOURCE LINE # 322
0019 7B01              MOV     R3,#01H
001B 7A50              MOV     R2,#050H
001D 7903              MOV     R1,#03H
001F 120000      E     LCALL   _cyread8
0022 EF                MOV     A,R7
0023 4402              ORL     A,#02H
0025 FD                MOV     R5,A
0026 7B01              MOV     R3,#01H
0028 7A50              MOV     R2,#050H
002A 7903              MOV     R1,#03H
002C 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 323
002F 7B01              MOV     R3,#01H
0031 7A50              MOV     R2,#050H
0033 7913              MOV     R1,#013H
0035 120000      E     LCALL   _cyread8
0038 EF                MOV     A,R7
0039 4402              ORL     A,#02H
003B FD                MOV     R5,A
003C 7B01              MOV     R3,#01H
003E 7A50              MOV     R2,#050H
0040 7913              MOV     R1,#013H
0042 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 326
0045 9043A0            MOV     DPTR,#043A0H
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A EF                MOV     A,R7
004B 4440              ORL     A,#040H
004D FF                MOV     R7,A
004E 9043A0            MOV     DPTR,#043A0H
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
0053 9043C2            MOV     DPTR,#043C2H
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 EF                MOV     A,R7
0059 4410              ORL     A,#010H
005B FF                MOV     R7,A
005C 9043C2            MOV     DPTR,#043C2H
005F EF                MOV     A,R7
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 331
0061 7B08              MOV     R3,#08H
0063 7A00              MOV     R2,#00H
0065 7900              MOV     R1,#00H
0067 C003              PUSH    AR3
0069 C002              PUSH    AR2
006B C001              PUSH    AR1
006D 7B00              MOV     R3,#00H
006F 7A51              MOV     R2,#051H
0071 7922              MOV     R1,#022H
0073 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0076 120000      E     LCALL   ?C?PSTXDATA
0079 D001              POP     AR1
007B D002              POP     AR2
007D D003              POP     AR3
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/06/2015 16:45:21 PAGE 16  

007F 7F08              MOV     R7,#08H
0081 7E00              MOV     R6,#00H
0083 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 334
0086 904322            MOV     DPTR,#04322H
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B EF                MOV     A,R7
008C 4408              ORL     A,#08H
008E FF                MOV     R7,A
008F 904322            MOV     DPTR,#04322H
0092 EF                MOV     A,R7
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 335
0094 9046EC            MOV     DPTR,#046ECH
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 EF                MOV     A,R7
009A C3                CLR     C
009B 9405              SUBB    A,#05H
009D 5006              JNC     ?C0026
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
009F 904689            MOV     DPTR,#04689H
00A2 743A              MOV     A,#03AH
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
00A5         ?C0026:
                                           ; SOURCE LINE # 342
00A5 904800            MOV     DPTR,#04800H
00A8 74C0              MOV     A,#0C0H
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 344
00AB 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 346
00AE 904800            MOV     DPTR,#04800H
00B1 7480              MOV     A,#080H
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
00B4 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 352
00B7 7B00              MOV     R3,#00H
00B9 7A43              MOV     R2,#043H
00BB 79A0              MOV     R1,#0A0H
00BD C003              PUSH    AR3
00BF C002              PUSH    AR2
00C1 C001              PUSH    AR1
00C3 7B00              MOV     R3,#00H
00C5 7A43              MOV     R2,#043H
00C7 79B0              MOV     R1,#0B0H
00C9 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00CC 120000      E     LCALL   ?C?PSTXDATA
00CF D001              POP     AR1
00D1 D002              POP     AR2
00D3 D003              POP     AR3
00D5 7F0E              MOV     R7,#0EH
00D7 7E00              MOV     R6,#00H
00D9 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 353
00DC 9043B0            MOV     DPTR,#043B0H
00DF E0                MOVX    A,@DPTR
00E0 FF                MOV     R7,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/06/2015 16:45:21 PAGE 17  

00E1 EF                MOV     A,R7
00E2 54FD              ANL     A,#0FDH
00E4 FF                MOV     R7,A
00E5 EF                MOV     A,R7
00E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
00E7 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    809    ----
   CONSTANT SIZE    =    133    ----
   XDATA SIZE       =      4       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
