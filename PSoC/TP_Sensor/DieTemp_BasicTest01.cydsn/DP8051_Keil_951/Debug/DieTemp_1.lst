C51 COMPILER V9.51   DIETEMP_1                                                             04/06/2015 16:45:21 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE DIETEMP_1
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\DieTemp_1.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\DieTemp_1.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_951\Debug\DieTemp_1.lst) CD DB NOIP O
                    -T(2,SIZE) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051_Keil_951\Debug\DieTemp_1.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: DieTemp_1_DieTemp.c
   3          * Version 2.0
   4          *
   5          * Description:
   6          *  Provides the API to acquire the die temperature.
   7          *
   8          ********************************************************************************
   9          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  10          * You may use this file only in accordance with the license, terms, conditions,
  11          * disclaimers, and limitations in the end user license agreement accompanying
  12          * the software package with which this file was provided.
  13          *******************************************************************************/
  14          
  15          
  16          #include <cydevice_trm.H>
  17          #include <DieTemp_1.h>
  18          
  19          
  20          #define DieTemp_1_NUMBER_OF_SAMPLES      (0x1u)
  21          #define DieTemp_1_TIMER_PERIOD           (0xFFFu)
  22          #define DieTemp_1_CLK_DIV_SELECT         (0x4u)
  23          #define DieTemp_1_SPC_CLK_PERIOD         (120u) /* In nano seconds. */
  24          #define DieTemp_1_NANO_TO_MILLI_FACTOR   (1000000u)
  25          #define DieTemp_1_FRM_EXEC_TIME          (1000u) /* In nano seconds. */
  26          
  27          #define DieTemp_1_GET_TEMPR_TIME     (uint32)(((((uint32)1u << (DieTemp_1_NUMBER_OF_SAMPLES + 1u))) * \
  28                                                          ((uint32)(DieTemp_1_SPC_CLK_PERIOD * \
  29                                                          DieTemp_1_CLK_DIV_SELECT)) * \
  30                                                          ((uint32)DieTemp_1_TIMER_PERIOD)) + \
  31                                                          (uint32)DieTemp_1_FRM_EXEC_TIME)
  32          
  33          #define DieTemp_1_MAX_WAIT           (uint16)(((DieTemp_1_GET_TEMPR_TIME + \
  34                                                          DieTemp_1_NANO_TO_MILLI_FACTOR) - 1u) / \
  35                                                          DieTemp_1_NANO_TO_MILLI_FACTOR)  /* In milli seconds. */
  36          
  37          static cystatus DieTemp_1_GetTempT(int16 * temperature);
  38          
  39          
  40          /*******************************************************************************
  41          * Function Name: DieTemp_1_Start
  42          ********************************************************************************
  43          *
  44          * Summary:
  45          *  Starts the SPC command to get the die temperature. If this function is
  46          *  called successfuly. The SPC will be locked and DieTemp_1_QueryDieTemp
  47          *  will have to be successfuly called to unlock it. CySpcUnlock() can also
  48          *  be called if the caller decides not to finish the temperature reading.
  49          *
  50          * Parameters:
  51          *  void.
  52          *
  53          * Return:
C51 COMPILER V9.51   DIETEMP_1                                                             04/06/2015 16:45:21 PAGE 2   

  54          *  CYRET_STARTED if the spc command was started sucessfuly.
  55          *  CYRET_UNKNOWN if the spc command failed.
  56          *  CYRET_LOCKED if the spc was busy.
  57          *
  58          *******************************************************************************/
  59          cystatus DieTemp_1_Start(void) 
  60          {
  61   1          cystatus status;
  62   1      
  63   1          /* Plan for failure. */
  64   1          status = CYRET_UNKNOWN;
  65   1      
  66   1          /* Power up the SPC. */
  67   1          CySpcStart();
  68   1      
  69   1          if(CySpcLock() == CYRET_SUCCESS)
  70   1          {
  71   2              #if(CY_PSOC5A)
                          if(CYRET_STARTED == CySpcGetTemp(DieTemp_1_NUMBER_OF_SAMPLES,
                                                           DieTemp_1_TIMER_PERIOD,
                                                           DieTemp_1_CLK_DIV_SELECT))
                          {
                              status = CYRET_STARTED;
                          }
                      #else
  79   2                  if(CYRET_STARTED == CySpcGetTemp(DieTemp_1_NUMBER_OF_SAMPLES))
  80   2                  {
  81   3                      status = CYRET_STARTED;
  82   3                  }
  83   2              #endif  /* (CY_PSOC5A) */
  84   2              CySpcUnlock();
  85   2          }
  86   1          else
  87   1          {
  88   2              status = CYRET_LOCKED;
  89   2          }
  90   1          return (status);
  91   1      }
  92          
  93          
  94          /*******************************************************************************
  95          * FUNCTION NAME:   DieTemp_1_Stop
  96          ********************************************************************************
  97          *
  98          * Summary:
  99          *  There is no need to stop or disable this component. This component is
 100          *  naturally a slave that sends request to SPC through SPC API of cy_boot
 101          *  and waits for data to be ready or in case of non-blocking operation it
 102          *  sends request to SPC and user can manually poll the result.
 103          *
 104          * Parameters:
 105          *  void
 106          *
 107          * Return:
 108          *  void
 109          *
 110          *******************************************************************************/
 111          void DieTemp_1_Stop(void) 
 112          {
 113   1          /* There aren't anything to stop */
 114   1      }
 115          
C51 COMPILER V9.51   DIETEMP_1                                                             04/06/2015 16:45:21 PAGE 3   

 116          
 117          /*******************************************************************************
 118          * Function Name: DieTemp_1_Query
 119          ********************************************************************************
 120          *
 121          * Summary:
 122          *  Querys the SPC to see if the termperature command is finished.
 123          *
 124          * Parameters:
 125          *  temperature: Address to store the two byte temperature value.
 126          *
 127          * Return:
 128          *  CYRET_SUCCESS if the temperature command completed sucessfully.
 129          *  CYRET_UNKNOWN if the there was an spc failure.
 130          *  CYRET_STARTED if the temperature command has not completed.
 131          *  CYRET_TIMEOUT if waited to long before reading data.
 132          *
 133          *******************************************************************************/
 134          cystatus DieTemp_1_Query(int16 * temperature) 
 135          {
 136   1          uint8 temp[2u];
 137   1          cystatus status;
 138   1      
 139   1      
 140   1          if(CY_SPC_BUSY)
 141   1          {
 142   2              if((CY_SPC_STATUS_REG>>2u) == CYRET_SUCCESS)
 143   2              {
 144   3                  /* See if any data is ready. */
 145   3                  if(CySpcReadData(temp, 2u) == 2u)
 146   3                  {
 147   4                      if(temp[0u] == 1u)
 148   4                      {
 149   5                          *temperature = (int16) ((uint16) temp[1]);
 150   5                      }
 151   4                      else
 152   4                      {
 153   5                          *temperature = (int16) - ((int16) temp[1]);
 154   5                      }
 155   4                      status = CYRET_SUCCESS;
 156   4                  }
 157   3                  else
 158   3                  {
 159   4                      status = CYRET_UNKNOWN;
 160   4                  }
 161   3              }
 162   2              else
 163   2              {
 164   3                  status = CYRET_STARTED;
 165   3              }
 166   2          }
 167   1          else
 168   1          {
 169   2              status = CYRET_TIMEOUT;
 170   2          }
 171   1      
 172   1          if(status != CYRET_STARTED)
 173   1          {
 174   2              /* Unlock the SPC so someone else can use it. */
 175   2              CySpcUnlock();
 176   2          }
 177   1          return (status);
C51 COMPILER V9.51   DIETEMP_1                                                             04/06/2015 16:45:21 PAGE 4   

 178   1      }
 179          
 180          
 181          /*******************************************************************************
 182          * Function Name: DieTemp_1_GetTemp
 183          ********************************************************************************
 184          *
 185          * Summary:
 186          *  Sets up the command to get the temperature and blocks until finished. After
 187          *  DieTemp_1_MAX_WAIT ticks the function will return even if the
 188          *  SPC has not finished.
 189          *
 190          * Parameters:
 191          *  temperature: Address to store the two byte temperature value.
 192          *
 193          * Return:
 194          *  CYRET_SUCCESS if the command was completed sucessfuly.
 195          *  Status code from DieTemp_1_Start or DieTemp_1_Query
 196          *
 197          *******************************************************************************/
 198          static cystatus DieTemp_1_GetTempT(int16 * temperature) 
 199          {
 200   1          uint16 us;
 201   1          cystatus status;
 202   1      
 203   1          /* Start the temp reading */
 204   1          status = DieTemp_1_Start();
 205   1      
 206   1          if(status == CYRET_STARTED)
 207   1          {
 208   2              /**************************************************************************
 209   2              * Wait for SPC to finish temperature reading. If state will change and SPC
 210   2              * will finish - break cycle.
 211   2              * DieTemp_1_MAX_WAIT is maximum time in ms to wait for SPC.
 212   2              **************************************************************************/
 213   2              for (us=(DieTemp_1_MAX_WAIT*1000u); us>0u; us-=10u)
 214   2              {
 215   3                  if((CYRET_STARTED != status)&&(CY_SPC_IDLE))
 216   3                  {
 217   4                      break;
 218   4                  }
 219   3                  else if(CYRET_STARTED == status)
 220   3                  {
 221   4                      status = DieTemp_1_Query(temperature);
 222   4                  }
 223   3                  else
 224   3                  {
 225   4                      /* SPC has not finished reading or isn't idle */
 226   4                  }
 227   3                  CyDelayUs(10u);
 228   3              }
 229   2          }
 230   1      
 231   1          return status;
 232   1      }
 233          cystatus DieTemp_1_GetTemp(int16 * temperature) 
 234          {
 235   1          cystatus status;
 236   1          uint8 count = 2u;
 237   1          while (count != 0u)
 238   1          {
 239   2              status = DieTemp_1_GetTempT(temperature);
C51 COMPILER V9.51   DIETEMP_1                                                             04/06/2015 16:45:21 PAGE 5   

 240   2              if (status != CYRET_SUCCESS)
 241   2              {
 242   3                  break;
 243   3              }
 244   2              count--;
 245   2          }
 246   1          return status;
 247   1      }
 248          
 249          
 250          /* [] END OF FILE */
C51 COMPILER V9.51   DIETEMP_1                                                             04/06/2015 16:45:21 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION DieTemp_1_Start (BEGIN)
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
                                           ; SOURCE LINE # 64
0000 900000      R     MOV     DPTR,#status
0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 67
0006 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 69
0009 120000      E     LCALL   CySpcLock
000C EF                MOV     A,R7
000D 7014              JNZ     ?C0001
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 79
000F 7F01              MOV     R7,#01H
0011 120000      E     LCALL   _CySpcGetTemp
0014 EF                MOV     A,R7
0015 B40706            CJNE    A,#07H,?C0002
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
0018 900000      R     MOV     DPTR,#status
001B 7407              MOV     A,#07H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 82
001E         ?C0002:
                                           ; SOURCE LINE # 84
001E 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 85
0021 8006              SJMP    ?C0003
0023         ?C0001:
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
0023 900000      R     MOV     DPTR,#status
0026 7404              MOV     A,#04H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 89
0029         ?C0003:
                                           ; SOURCE LINE # 90
0029 900000      R     MOV     DPTR,#status
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
                                           ; SOURCE LINE # 91
002E         ?C0004:
002E 22                RET     
             ; FUNCTION DieTemp_1_Start (END)

             ; FUNCTION DieTemp_1_Stop (BEGIN)
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 114
0000 22                RET     
             ; FUNCTION DieTemp_1_Stop (END)

             ; FUNCTION _DieTemp_1_Query (BEGIN)
                                           ; SOURCE LINE # 134
0000 900000      R     MOV     DPTR,#temperature
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 135
C51 COMPILER V9.51   DIETEMP_1                                                             04/06/2015 16:45:21 PAGE 7   

                                           ; SOURCE LINE # 140
0006 904722            MOV     DPTR,#04722H
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B EF                MOV     A,R7
000C 5402              ANL     A,#02H
000E FF                MOV     R7,A
000F 7E00              MOV     R6,#00H
0011 EF                MOV     A,R7
0012 4E                ORL     A,R6
0013 706D              JNZ     ?C0006
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
0015 904722            MOV     DPTR,#04722H
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 13                RRC     A
001C 13                RRC     A
001D 543F              ANL     A,#03FH
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 7057              JNZ     ?C0007
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 145
0023 7B01              MOV     R3,#01H
0025 7A00        R     MOV     R2,#HIGH temp
0027 7900        R     MOV     R1,#LOW temp
0029 7D02              MOV     R5,#02H
002B 120000      E     LCALL   _CySpcReadData
002E EF                MOV     A,R7
002F 6402              XRL     A,#02H
0031 703F              JNZ     ?C0008
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
0033 900000      R     MOV     DPTR,#temp
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 B40115            CJNE    A,#01H,?C0009
                                           ; SOURCE LINE # 148
                                           ; SOURCE LINE # 149
003C 900000      R     MOV     DPTR,#temp+01H
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 7E00              MOV     R6,#00H
0043 900000      R     MOV     DPTR,#temperature
0046 120000      E     LCALL   ?C?PLDXDATA
0049 EE                MOV     A,R6
004A 8FF0              MOV     B,R7
004C 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 150
004F 801A              SJMP    ?C0010
0051         ?C0009:
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
0051 900000      R     MOV     DPTR,#temp+01H
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 7E00              MOV     R6,#00H
0058 C3                CLR     C
0059 E4                CLR     A
C51 COMPILER V9.51   DIETEMP_1                                                             04/06/2015 16:45:21 PAGE 8   

005A 9F                SUBB    A,R7
005B FF                MOV     R7,A
005C E4                CLR     A
005D 9E                SUBB    A,R6
005E FE                MOV     R6,A
005F 900000      R     MOV     DPTR,#temperature
0062 120000      E     LCALL   ?C?PLDXDATA
0065 EE                MOV     A,R6
0066 8FF0              MOV     B,R7
0068 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 154
006B         ?C0010:
                                           ; SOURCE LINE # 155
006B 900000      R     MOV     DPTR,#status
006E E4                CLR     A
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
0070 8016              SJMP    ?C0013
0072         ?C0008:
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
0072 900000      R     MOV     DPTR,#status
0075 74FF              MOV     A,#0FFH
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
0078 800E              SJMP    ?C0013
007A         ?C0007:
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
007A 900000      R     MOV     DPTR,#status
007D 7407              MOV     A,#07H
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
                                           ; SOURCE LINE # 166
0080 8006              SJMP    ?C0013
0082         ?C0006:
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
0082 900000      R     MOV     DPTR,#status
0085 7410              MOV     A,#010H
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 170
0088         ?C0013:
                                           ; SOURCE LINE # 172
0088 900000      R     MOV     DPTR,#status
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
008D EF                MOV     A,R7
008E 6407              XRL     A,#07H
0090 6003              JZ      ?C0014
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 175
0092 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 176
0095         ?C0014:
                                           ; SOURCE LINE # 177
0095 900000      R     MOV     DPTR,#status
0098 E0                MOVX    A,@DPTR
0099 FF                MOV     R7,A
                                           ; SOURCE LINE # 178
009A         ?C0015:
C51 COMPILER V9.51   DIETEMP_1                                                             04/06/2015 16:45:21 PAGE 9   

009A 22                RET     
             ; FUNCTION _DieTemp_1_Query (END)

             ; FUNCTION _DieTemp_1_GetTempT (BEGIN)
                                           ; SOURCE LINE # 198
0000 900000      R     MOV     DPTR,#temperature
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 204
0006 120000      R     LCALL   DieTemp_1_Start
0009 900000      R     MOV     DPTR,#status
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
000E 900000      R     MOV     DPTR,#status
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 6407              XRL     A,#07H
0016 7063              JNZ     ?C0016
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 213
0018 900000      R     MOV     DPTR,#us
001B 741F              MOV     A,#01FH
001D F0                MOVX    @DPTR,A
001E A3                INC     DPTR
001F 7440              MOV     A,#040H
0021 F0                MOVX    @DPTR,A
0022         ?C0017:
0022 900000      R     MOV     DPTR,#us
0025 E0                MOVX    A,@DPTR
0026 FE                MOV     R6,A
0027 A3                INC     DPTR
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A D3                SETB    C
002B EF                MOV     A,R7
002C 9400              SUBB    A,#00H
002E EE                MOV     A,R6
002F 9400              SUBB    A,#00H
0031 4048              JC      ?C0016
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
0033 900000      R     MOV     DPTR,#status
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 6407              XRL     A,#07H
003B 6013              JZ      ?C0020
003D 904722            MOV     DPTR,#04722H
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 5402              ANL     A,#02H
0045 FF                MOV     R7,A
0046 7E00              MOV     R6,#00H
0048 EF                MOV     A,R7
0049 4E                ORL     A,R6
004A 6004              JZ      ?C0020
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
004C 802D              SJMP    ?C0016
C51 COMPILER V9.51   DIETEMP_1                                                             04/06/2015 16:45:21 PAGE 10  

                                           ; SOURCE LINE # 218
004E 8017              SJMP    ?C0021
0050         ?C0020:
                                           ; SOURCE LINE # 219
0050 900000      R     MOV     DPTR,#status
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 EF                MOV     A,R7
0056 B4070E            CJNE    A,#07H,?C0021
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 221
0059 900000      R     MOV     DPTR,#temperature
005C 120000      E     LCALL   ?C?PLDXDATA
005F 120000      R     LCALL   _DieTemp_1_Query
0062 900000      R     MOV     DPTR,#status
0065 EF                MOV     A,R7
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 224
                                           ; SOURCE LINE # 226
0067         ?C0021:
                                           ; SOURCE LINE # 227
0067 7F0A              MOV     R7,#0AH
0069 7E00              MOV     R6,#00H
006B 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 228
006E 900000      R     MOV     DPTR,#us
0071 74FF              MOV     A,#0FFH
0073 75F0F6            MOV     B,#0F6H
0076 120000      E     LCALL   ?C?IILDX
0079 80A7              SJMP    ?C0017
                                           ; SOURCE LINE # 229
007B         ?C0016:
                                           ; SOURCE LINE # 231
007B 900000      R     MOV     DPTR,#status
007E E0                MOVX    A,@DPTR
007F FF                MOV     R7,A
                                           ; SOURCE LINE # 232
0080         ?C0024:
0080 22                RET     
             ; FUNCTION _DieTemp_1_GetTempT (END)

             ; FUNCTION _DieTemp_1_GetTemp (BEGIN)
                                           ; SOURCE LINE # 233
0000 900000      R     MOV     DPTR,#temperature
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 236
0006 900000      R     MOV     DPTR,#count
0009 7402              MOV     A,#02H
000B F0                MOVX    @DPTR,A
000C         ?C0025:
                                           ; SOURCE LINE # 237
000C 900000      R     MOV     DPTR,#count
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 601E              JZ      ?C0026
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 239
0014 900000      R     MOV     DPTR,#temperature
0017 120000      E     LCALL   ?C?PLDXDATA
C51 COMPILER V9.51   DIETEMP_1                                                             04/06/2015 16:45:21 PAGE 11  

001A 120000      R     LCALL   _DieTemp_1_GetTempT
001D 900000      R     MOV     DPTR,#status
0020 EF                MOV     A,R7
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
0022 900000      R     MOV     DPTR,#status
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 7008              JNZ     ?C0026
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 243
002A         ?C0027:
                                           ; SOURCE LINE # 244
002A 900000      R     MOV     DPTR,#count
002D E0                MOVX    A,@DPTR
002E 14                DEC     A
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 245
0030 80DA              SJMP    ?C0025
0032         ?C0026:
                                           ; SOURCE LINE # 246
0032 900000      R     MOV     DPTR,#status
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
                                           ; SOURCE LINE # 247
0037         ?C0028:
0037 22                RET     
             ; FUNCTION _DieTemp_1_GetTemp (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    388    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      18
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
